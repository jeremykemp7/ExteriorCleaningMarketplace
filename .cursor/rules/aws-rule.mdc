---
description: AWS Rules
globs: 
alwaysApply: false
---


# üöÄ Cursor Rules for Exterior Cleaning Marketplace

## üîπ General Project Structure
- **Follow this folder structure:**
  - `lib/`
    - `main.dart` ‚Üí App entry point
    - `theme.dart` ‚Üí Global styles (colors, fonts, button styles)
    - `screens/` ‚Üí All UI screens
    - `widgets/` ‚Üí Reusable UI components
    - `services/` ‚Üí API integration and backend logic (Amplify)
    - `models/` ‚Üí Data models for handling users, jobs, and reviews
- **All API logic must be inside `services/` and must NOT be mixed with UI code.**
- **Each screen must have its own Dart file inside `screens/`.**

---

## üîπ AWS Amplify Authentication (Cognito)
- **Cognito must be used for authentication and role-based access control.**
- **On signup, store user roles (`Property Manager`, `Cleaning Company`, `Admin`) as Cognito attributes.**
- **Redirect users to the correct dashboard after login based on role.**
- **Multi-Factor Authentication (MFA) must be enabled for admin accounts.**
- **All authentication logic must be in `services/auth_service.dart`.**
- ‚ùå **Do NOT mix authentication logic inside UI screens.**

---

## üîπ AWS DynamoDB for Data Storage
- **DynamoDB must store:**
  - User profiles (Cleaning Companies, Property Managers, Admins)
  - Job listings & bidding data
  - Reviews & ratings
- **Partition & Sort Key Usage:**
  - `Table: JobListings`
    - `Partition Key: jobId`
    - `Sort Key: createdAt`
- **All database operations must go through `services/database_service.dart`.**
- ‚ùå **Do NOT make direct database calls inside UI screens.**

---

## üîπ GraphQL API with AWS AppSync
- **Use GraphQL with AWS AppSync to interact with DynamoDB.**
- **Define schema in `amplify/backend/api/schema.graphql`.**
- **Use queries, mutations, and subscriptions for:**
  - Fetching job listings
  - Submitting bids
  - Posting and retrieving reviews
- **All GraphQL queries must be inside `services/graphql_queries.dart`.**
- ‚ùå **Do NOT write GraphQL queries inside UI components.**

---

## üîπ UI & Theming Rules
- **Global styles must be defined in `theme.dart`.**
- **Use only these brand fonts:**
  - **Headings:** Oswald
  - **Subheadings:** Roboto
  - **Body Text:** Arial
- **Primary Colors (from Lucid Bots' Brand Guide):**
  - `Dark Blue (#142933)` - Primary
  - `Cyan (#23C0D8)` - Secondary
  - `Yellow (#FFD700)` - Accent
- **All buttons must follow the standard styling in `widgets/custom_button.dart`.**
- **Spacing should follow multiples of `8px` for margins and paddings.**
- ‚ùå **Do NOT use hardcoded colors or font sizes inside UI files.**

---

## üîπ Marketplace Functionality Rules
- **Users must be able to:**
  - Post job listings (Property Managers)
  - Submit bids (Cleaning Companies)
  - Accept bids & finalize jobs
  - Leave ratings & reviews
- **Job listings must be paginated** and displayed in a card-based layout.
- **Filtering and sorting should be available for location, price, and ratings.**
- **All business logic must be handled in `services/marketplace_service.dart`.**
- ‚ùå **Do NOT allow duplicate job postings from the same user.**

---

## üîπ Messaging & Notifications
- **Use AWS AppSync subscriptions for real-time messaging between users.**
- **Store messages in DynamoDB under a `Messages` table.**
- **Use AWS Pinpoint for email & push notifications.**
- **All messaging logic must be inside `services/messaging_service.dart`.**
- ‚ùå **Do NOT store sensitive user data inside messages.**

---

## üîπ Security & Deployment Best Practices
- **Amplify Hosting must be used for frontend deployment.**
- **AWS IAM roles must be used to secure database access.**
- **All API requests must be authenticated using Amplify Auth.**
- **Log all API calls for auditing purposes.**
- **Before deployment, always run `amplify push` to ensure backend changes are live.**
- ‚ùå **Do NOT commit sensitive AWS credentials to GitHub.**

---

# ‚úÖ Final Notes
- **Ensure all rules are followed before merging any PR.**
- **Run tests after making API changes to verify GraphQL queries are correct.**
- **Maintain consistency in naming conventions across the project.**
