rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCleaner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'licensed_cleaner';
    }

    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }

    // Properties
    match /properties/{propertyId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() 
        && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() 
        && (resource.data.ownerId == request.auth.uid 
        || request.resource.data.assignedTo == request.auth.uid);
    }

    // Bids
    match /bids/{bidId} {
      allow read: if isSignedIn();
      // Allow cleaners to create bids
      allow create: if isSignedIn() && isCleaner();
      // Allow updates by the cleaner who created the bid or the property owner
      allow update: if isSignedIn()
        && (resource.data.cleanerId == request.auth.uid
        || get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.ownerId == request.auth.uid);
      // Allow cleaners to delete their own pending bids
      allow delete: if isSignedIn()
        && resource.data.cleanerId == request.auth.uid
        && resource.data.status == 'pending';
    }

    // Reviews
    match /reviews/{reviewId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() 
        && request.resource.data.authorId == request.auth.uid;
    }

    // Chats
    match /chats/{chatId} {
      // Allow read if user is a participant
      allow read: if isSignedIn()
        && (
          request.auth.uid in resource.data.participants
          || !exists(/databases/$(database)/documents/chats/$(chatId))
        );
      
      // Allow create if user is one of the participants
      allow create: if isSignedIn()
        && request.auth.uid in request.resource.data.participants;
      
      // Allow update if user is a participant (for marking messages as read)
      allow update: if isSignedIn()
        && request.auth.uid in resource.data.participants;

      // Chat messages subcollection
      match /messages/{messageId} {
        // Allow read if user is a participant in the parent chat
        allow read: if isSignedIn()
          && (
            request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
            || !exists(/databases/$(database)/documents/chats/$(chatId))
          );
        
        // Allow create if user is a participant and is the sender
        allow create: if isSignedIn()
          && (
            !exists(/databases/$(database)/documents/chats/$(chatId))
            || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
          )
          && request.resource.data.senderId == request.auth.uid;
        
        // Allow update if user is the receiver (for marking as read)
        allow update: if isSignedIn()
          && request.auth.uid == resource.data.receiverId
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
        
        // Allow delete if user is the sender
        allow delete: if isSignedIn()
          && request.auth.uid == resource.data.senderId;
      }
    }
  }
} 